type Type_User {
    id: String
    fullName: String
    email: String
    phone: String
    isDel: Boolean
    createdAt: DateTime
    updatedAt: DateTime
}

input Input_Get_User_Query {
    id: String!
}

input Input_Get_User_Options {
    populate: JSON
}

type Type_Users {
    docs: [Type_User]
    totalDocs: Int
    limit: Int
    hasPrevPage: Boolean
    hasNextPage: Boolean
    page: Int
    totalPages: Int
    offset: Int
    prevPage: Int
    nextPage: Int
    pagingCounter: Int
    meta: JSON
}

union Union_Result_User = Type_User | Type_Users

type Type_Response_User {
    success: Boolean!
    message: String
    result: Union_Result_User
}

type Query {
    getUsers(filters: Input_Filters): Type_Response_User!
    getUser(filters: Input_Filters): Type_Response_User!
}

type Mutation {
    createUser(fullName: String!, email: String!, password: String!, phone: String): Type_Response_User!
    updateUser(id: String!, fullName: String, email: String, password: String, phone: String): Type_Response_User!
    deleteUser(id: String!): Type_Response_User!
}
